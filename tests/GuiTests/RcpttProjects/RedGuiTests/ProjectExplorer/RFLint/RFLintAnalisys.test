--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _Q0pU0LpZEee_RrklJFm4zA,_VzYJ0KEAEea9Cvae3yWo1A
Element-Name: RFLintAnalisys
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _bwoQULpQEee_RrklJFm4zA
Runtime-Version: 2.4.2.201905080442
Save-Time: 6/14/19 2:12 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

//
//
//  For this test install:
//  pip install --upgrade robotframework-lint
//


proc "check-warnings-for-one-test"{
get-view Problems | get-tree | get-item -path "Errors \\(3 items\\)" | get-property childCount | equals 3 | verify-true
	with [get-view Problems | get-tree] {
	    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[0].getText()" 
	        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
	    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[1].getText()" 
	        | equals "The '*.tsv' file extension is deprecated. Only '*.robot' should be used for suites." | verify-true
	    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[2].getText()" 
	        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
	        | verify-true
	    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[3].getText()" 
	        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
	        | verify-true
	}
}
//run analisys on test
get-view "Project Explorer" | get-tree | select "project_a/b1/b2/test2.robot" | get-menu 
    -path "Robot Framework/Run RfLint analysis" | click
    
//check if now are 3 warnings    
check-warnings-for-one-test

//run analisys on folder
get-view "Project Explorer" | get-tree | select "project_a/a1/a2" | get-menu 
    -path "Robot Framework/Run RfLint analysis" | click

get-view "Project Explorer" | get-tree | select "project_a/a1/a2/test1.robot" | double-click
get-editor "test1.robot" | get-tab-folder | get-tab-item "Test Cases" | click
set-list-with-markers-and-comapare -file "test1.robot" -table "Test Cases"  -ref_list [list 1 2] -type "ERROR"

get-editor "test1.robot" | get-tab-folder | get-tab-item "Keywords" | click
set-list-with-markers-and-comapare -file "test1.robot" -table "User Keywords"  -ref_list [list 1 7] -type "ERROR"
set-list-with-markers-and-comapare -file "test1.robot" -table "User Keywords"  -ref_list [list 4] -type "WARNING"
get-editor "test1.robot" | close

    
//check errors    
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Duplicate keyword name 'ABC' (DuplicateKeywordNames)" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "Duplicated keyword definition 'abc'" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "Duplicated keyword definition 'ABC'" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "No keyword documentation (RequireKeywordDocumentation)" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "No testcase documentation (RequireTestDocumentation)" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "Test case 'test 1' contains no keywords to execute" | verify-true
}
with [get-view Problems | get-tree] {
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line is too long (exceeds 100 characters) (LineTooLong)" | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
        
	 get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[3].getText()" 
    	| equals "The '*.tsv' file extension is deprecated. Only '*.robot' should be used for suites." | verify-true
        
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[6].getText()" 
        | equals "Too few steps (0) in test case (TooFewTestSteps)" | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[7].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[8].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
}

//check line, type, file name for one error
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Description']" | equals "Duplicate keyword name 'ABC' (DuplicateKeywordNames)" 
        | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Resource']" | equals "test1.robot" | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Path']" | equals "/project_a/a1/a2" | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Location']" | equals "line 13" | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Type']" | equals "RfLint Problem" | verify-true
}

//check line, type, file name for one warning
with [get-view Problems | get-tree] {
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Description']" | equals "Line is too long (exceeds 100 characters) (LineTooLong)" 
        | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Resource']" | equals "test1.robot" | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Path']" | equals "/project_a/a1/a2" | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Location']" | equals "line 11" | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Type']" | equals "RfLint Problem" | verify-true
}

//clear problem from folder - check if one from other file still exists
get-view "Project Explorer" | get-tree | select "project_a/a1/a2" | get-menu 
    -path "Robot Framework/Clean RfLint problems" | click
    
check-warnings-for-one-test

//open prefernce 
get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Errors\\/Warnings/RfLint validation"

//check how view looks like
with [get-window Preferences | get-tab-folder] {

	// 2 tabs
    get-property "pages[0]" | equals General | verify-true
    get-property "pages[1]" | equals Rules | verify-true
    get-property activePage | equals General | verify-true
    get-property tabCount | equals 2 | verify-true
    get-property "getChildren().length" | equals 2 | verify-true
    get-property "getChildren().Control[0].getChildren().length" | equals 3 | verify-true
    
    //rules
    get-property "getChildren().Control[0].getChildren().Control[0].getText()" | equals "Additional rules files" 
        | verify-true
    get-property "getChildren().Control[0].getChildren().Control[1].getItems().length" | equals 1 | verify-true
    get-property "getChildren().Control[0].getChildren().Control[1].getItems().TableItem[0].getText()" 
        | equals "...add new rules file" | verify-true
    get-property "getChildren().Control[0].getChildren().Control[2].getChildren().length" | equals 3 | verify-true
    
    // additional args
    get-property "getChildren().Control[0].getChildren().Control[2].getChildren().Control[0].getText()" 
        | equals "Additional arguments for RfLint" | verify-true
    get-property "getChildren().Control[0].getChildren().Control[2].getChildren().Control[1].getEditable()" 
        | equals true | verify-true
    get-property "getChildren().Control[0].getChildren().Control[2].getChildren().Control[1].getText()" | equals "" 
        | verify-true
        
    // vars button    
    get-property "getChildren().Control[0].getChildren().Control[2].getChildren().Control[2].getText()" 
        | equals "Variables..." | verify-true
    get-property "getChildren().Control[0].getChildren().Control[2].getChildren().Control[2].isEnabled()" | equals true 
        | verify-true
}

//rules tab
get-window Preferences | get-tab-folder | get-tab-item Rules | click
with [get-window Preferences | get-control Any -after [get-label "RfLint validation"] -index 13] {
    get-property "getChildren().length" | equals 3 | verify-true
    get-property "getChildren().Control[0].getText()" 
        | equals "Configure rules and their severity. Following rules are available for RfLint installed in <a href=\"org.robotframework.ide.eclipse.main.plugin.preferences.installed\">.*</a> environment:" 
        | verify-true

    //default rules
    get-property "getChildren().Control[1].getItems().length" | equals 16 | verify-true

    get-property "getChildren().Control[2].getChildren().length" | equals 1 | verify-true
    get-property "getChildren().Control[2].getChildren().Control[0].isLoading()" | equals false | verify-true
}


with [get-window Preferences | get-table] {
    get-property "getItems().TableItem[0].getData().getSeverity().toString()" | equals ERROR | verify-true
    get-property "getItems().TableItem[0].getData().getDocumentation()" 
        | equals "Verify that no keywords have a name of an existing keyword in the same file" | verify-true
    get-property "getItems().TableItem[0].getData().getRuleName()" | equals DuplicateKeywordNames | verify-true
    
    get-property "getItems().TableItem[1].getText()" | equals DuplicateTestNames | verify-true
    get-property "getItems().TableItem[1].getData().getSeverity().toString()" | equals ERROR | verify-true
    get-property "getItems().TableItem[1].getData().getDocumentation()" 
        | equals "Verify that no tests have a name of an existing test in the same suite" | verify-true
    get-property "getItems().TableItem[1].getData().getRuleName()" | equals DuplicateTestNames | verify-true
    
    get-property "getItems().TableItem[2].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[2].getData().getDocumentation()" 
        | equals "Verify the file has fewer lines than a given threshold.\n\n"
        + "You can configure the maximum number of lines. The default is 300." | verify-true
    get-property "getItems().TableItem[2].getData().getRuleName()" | equals FileTooLong | verify-true
    
    get-property "getItems().TableItem[3].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[3].getData().getDocumentation()" 
        | equals "Verify that there are no invalid table headers" | verify-true
    get-property "getItems().TableItem[3].getData().getRuleName()" | equals InvalidTable | verify-true
    
    get-property "getItems().TableItem[4].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[4].getData().getDocumentation()" 
        | equals "Check that a line is not too long (configurable; default=100)" | verify-true
    get-property "getItems().TableItem[4].getData().getRuleName()" | equals LineTooLong | verify-true
    
    get-property "getItems().TableItem[5].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[5].getData().getDocumentation()" 
        | equals "Warn about periods in the suite name\n\n"
        + "Since robot uses \".\" as a path separator, using a \".\" in a suite\n"
        + "name can lead to ambiguity." | verify-true
    get-property "getItems().TableItem[5].getData().getRuleName()" | equals PeriodInSuiteName | verify-true
    
    get-property "getItems().TableItem[6].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[6].getData().getDocumentation()" 
        | equals "Warn about periods in the testcase name\n\n"
        + "Since robot uses \".\" as a path separator, using a \".\" in a testcase\n"
        + "name can lead to ambiguity." | verify-true
    get-property "getItems().TableItem[6].getData().getRuleName()" | equals PeriodInTestName | verify-true
    
    get-property "getItems().TableItem[7].getData().getSeverity().toString()" | equals ERROR | verify-true
    get-property "getItems().TableItem[7].getData().getDocumentation()" 
        | equals "Verify that a keyword has documentation" | verify-true
    get-property "getItems().TableItem[7].getData().getRuleName()" | equals RequireKeywordDocumentation | verify-true
    
    get-property "getItems().TableItem[8].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[8].getData().getDocumentation()" 
        | equals "Verify that a test suite has documentation" | verify-true
    get-property "getItems().TableItem[8].getData().getRuleName()" | equals RequireSuiteDocumentation | verify-true
        
    get-property "getItems().TableItem[9].getData().getSeverity().toString()" | equals ERROR | verify-true
    get-property "getItems().TableItem[9].getData().getDocumentation()" 
        | equals "Verify that a test suite has documentation\n\n"
        + "This rule is not enforced for data driven tests (\"Test Template\" in Settings)" | verify-true
    get-property "getItems().TableItem[9].getData().getRuleName()" | equals RequireTestDocumentation | verify-true
    
    get-property "getItems().TableItem[10].getData().getSeverity().toString()" | equals ERROR | verify-true
    get-property "getItems().TableItem[10].getData().getDocumentation()" 
        | equals "Flags tags that have spaces in the tag name" | verify-true
    get-property "getItems().TableItem[10].getData().getRuleName()" | equals TagWithSpaces | verify-true
    
    get-property "getItems().TableItem[11].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[11].getData().getRuleName()" | equals TooFewKeywordSteps | verify-true
    
    get-property "getItems().TableItem[12].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[12].getData().getDocumentation()" 
        | equals "Tests should have at least a minimum number of steps\n\n"
        + "This rule is configurable. The default number of required steps is 2." | verify-true
    get-property "getItems().TableItem[12].getData().getRuleName()" | equals TooFewTestSteps | verify-true
    
    get-property "getItems().TableItem[13].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[13].getData().getDocumentation()" 
        | equals "Should not have too many tests in one suite.\n\n"
        + "The exception is if they are data-driven.\n\n"
        + "https://code.google.com/p/robotframework/wiki/HowToWriteGoodTestCases#Test_suite_structure\n\n"
        + "You can configure the maximum number of tests. The default is 10." | verify-true
    get-property "getItems().TableItem[13].getData().getRuleName()" | equals TooManyTestCases | verify-true
    
    get-property "getItems().TableItem[14].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[14].getData().getDocumentation()" 
        | equals "Workflow tests should have no more than ten steps.\n\n"
        + "https://code.google.com/p/robotframework/wiki/HowToWriteGoodTestCases#Workflow_tests" | verify-true
    get-property "getItems().TableItem[14].getData().getRuleName()" | equals TooManyTestSteps | verify-true
    
    get-property "getItems().TableItem[15].getData().getSeverity().toString()" | equals WARNING | verify-true
    get-property "getItems().TableItem[15].getData().getDocumentation()" 
        | equals "Check for multiple blank lines at the end of a file\n\n"
        + "This is a configurable. The default value is 2." | verify-true
    get-property "getItems().TableItem[15].getData().getRuleName()" | equals TrailingBlankLines | verify-true
}


//change new rule
with [get-window Preferences] {
    get-tab-folder | get-tab-item Rules | click
    with [get-table] {
        get-cell 4 2 | click
        get-cell 4 2 | mouse down -count 2
        double-click
        select LineTooLong | activate-cell-edit -column 2 -type MouseDoubleClickSelection
        with [get-editbox] {
            set-text 80
            key-type "NUMPAD_ENTER" "\\u000D"
        }
        apply-cell-edit -deactivate
    }
}
with [get-window Preferences | get-table] {
    //get-item -path LineTooLong | get-property "styles[0].font" | equals "Font {1779056093}" | verify-true
    //get-item -path LineTooLong | get-property "styles[1].font" | equals "Font {1779056093}" | verify-true
    //get-item -path LineTooLong | get-property "styles[2].font" | equals "Font {1779056093}" | verify-true
    //values
    get-item -path LineTooLong | get-property "values['Configuration']" | equals 80 | verify-true
    get-item -path LineTooLong | get-property "values['Rule']" | equals LineTooLong | verify-true
    get-item -path LineTooLong | get-property "values['Severity']" | equals Warning | verify-true
}

get-window Preferences | get-button "Apply and Close" | click

//run this new rule on project
get-view "Project Explorer" | get-tree | select "project_a" | get-menu -path "Robot Framework/Run RfLint analysis" 
    | click
wait-for-errors -amount 6 -times 6 -delay 1000
    
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(6 items\\)" | get-property childCount | equals 6 | verify-true
    
    //here is new warning
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line is too long (exceeds 80 characters) (LineTooLong)" | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
        
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[3].getText()" 
    	| equals "The '*.tsv' file extension is deprecated. Only '*.robot' should be used for suites." | verify-true
    	    
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[6].getText()" 
        | equals "Too few steps (0) in test case (TooFewTestSteps)" | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[7].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[8].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
    get-item -path "Warnings \\(10 items\\)" | get-property "getItems().TreeItem[9].getText()" 
        | equals "Too many trailing blank lines (TrailingBlankLines)" | verify-true
}

//remove all errors from project
get-view "Project Explorer" | get-tree | select "project_a" | get-menu -path "Robot Framework/Clean RfLint problems" 
    | click
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(3 items\\)" | get-property childCount | equals 3 | verify-true
    get-item -path "Warnings \\(3 items\\)" | get-property childCount | equals 3 | verify-true
}

//add cutom rule form python file
get-preferences-menu | click
set-dialog-result File "platform:/resource/project_a/customRules.py"
get-window Preferences | get-table -after [get-label "Additional rules files"] | get-item "...add new rules file" | double-click
with [get-window Preferences] {
    get-button "Apply and Close" | click
}


//run rule on one file
get-view "Project Explorer" | get-tree | select "project_a/test3.robot" | get-menu 
    -path "Robot Framework/Run RfLint analysis" | click
    
with [get-view Problems | get-tree] {
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line 5 should be empty (CustomRule)" | verify-true
        
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[1].getText()" 
    	| equals "The '*.tsv' file extension is deprecated. Only '*.robot' should be used for suites." | verify-true
    	
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "Too many trailing blank lines (TrailingBlankLines)" | verify-true
}


//change to error 
get-preferences-menu | click
with [get-window Preferences] {
    get-tab-folder | get-tab-item Rules | click
    with [get-table] {
        get-cell 7 1 | click
        get-cell 7 1 | click
        get-cell 7 1 | mouse down -count 2
        double-click
        
        //change to error
        select PeriodInTestName | activate-cell-edit -column 1 -type MouseDoubleClickSelection
        get-combo | select Error
        apply-cell-edit -deactivate
        //key-type "NUMPAD_ENTER" "\\u000D"
        get-cell 0 2 | click
        get-cell 0 2 | click
        get-cell 0 2 | mouse down -count 2
        double-click
        
        //set cutom rule to 3
        select CustomRule | activate-cell-edit -column 2 -type MouseDoubleClickSelection
        with [get-editbox] {
            set-text 3
            key-type "NUMPAD_ENTER" "\\u000D"
        }
        apply-cell-edit -deactivate
        get-cell 8 0 | click
    }
}

//click on rule to see doc
get-window Preferences | maximize
get-window Preferences | get-canvas | get-property text | equals "Verify that a keyword has documentation\r\n" 
    | verify-true

//check doc with link
with [get-window Preferences | get-table] {
    get-cell 15 0 | click
}

get-window Preferences | get-canvas | get-property text | equals "Workflow tests should have no more than ten steps.\r\n"
    + "https://code.google.com/p/robotframework/wiki/HowToWriteGoodTestCases#Workflow_tests\r\n" | verify-true
get-window Preferences | get-button "Apply and Close" | click

//run those rules on second project
get-view "Project Explorer" | get-tree | select "project_b"
exec-with-options {
    get-view "Project Explorer" | get-tree | get-menu -path "Robot Framework/Run RfLint analysis" | click
} -allowStatusDialog    

//checek new errors
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "'.' in testcase name 'dot.here' (PeriodInTestName)" | verify-true
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "Duplicated keyword definition 'abc'" | verify-true
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "Duplicated keyword definition 'ABC'" | verify-true
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "Test case 'test 1' contains no keywords to execute" | verify-true
        
    //warnings    
    get-item -path "Warnings \\(6 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line 3 should be empty (CustomRule)" | verify-true
    get-item -path "Warnings \\(6 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "Line 5 should be empty (CustomRule)" | verify-true
        
    get-item -path "Warnings \\(6 items\\)" | get-property "getItems().TreeItem[2].getText()" 
    	| equals "The '*.tsv' file extension is deprecated. Only '*.robot' should be used for suites." | verify-true
    	    
    get-item -path "Warnings \\(6 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(6 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(6 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "Too many trailing blank lines (TrailingBlankLines)" | verify-true
}

//click on error to go to editor
get-view Problems | get-tree | select "Errors \\(4 items\\)/'.' in testcase name 'dot.here' \\(PeriodInTestName\\)" 
    | double-click
    
//check selection    
get-editor "test4.tsv" | get-text-viewer | get-property "getSelectionText()" | equals "dot.here" | verify-true

//check new warning
get-view Problems | get-tree | select "Warnings (6 items)/Line 3 should be empty (CustomRule)" 
    | select "Warnings \\(6 items\\)/Line 3 should be empty \\(CustomRule\\)" | double-click
get-editor "test4.tsv" | get-text-viewer | get-property "getSelectionText()" | equals "*** Test Cases ***" | verify-true


------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
