--- RCPTT testcase ---
Format-Version: 1.0
Element-Name: ContentAssistPreferenceCheck
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _Nu4IgJQdEeWNpL9oeriwCw
Runtime-Version: 2.4.3.201909171500
Save-Time: 1/21/20 2:21 PM
Testcase-Type: ecl

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

RED-537
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

proc "wait-for-problems" [val count]{
	try -times 4 -delay 1000 -command{
		get-view Problems | get-tree | get-item "Errors? \\(.* items?\\)" | get-property childCount | equals $count | verify-true
	}	
}
proc "open-quick-fix" [val errorText]{
	try -times 3 -delay 1000 -command{
		get-view Problems | get-tree | select $errorText | get-menu "Quick Fix" | click
	}
}

//check how window looks like
get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Editor/Content Assist"

with [get-window Preferences] {
    with [get-control Any -after [get-label "Content Assist"] -index 10] {
        get-property "getChildren().length" | equals 4 | verify-true
        
        //auto insert
        get-property "getChildren().Control[0].getText()" 
        | equals "Robot content assistant preferences. See <a href=\"org.eclipse.ui.preferencePages.Keys\">'Keys'</a> to configure activation key binding." 
        | verify-true
	    get-property "getChildren().Control[1].getText()" | equals "Auto insert" | verify-true
	    get-property "getChildren().Control[1].getChildren().length" | equals 1 | verify-true
	    get-property "getChildren().Control[1].getChildren().Control[0].getSelection()" | equals false | verify-true
	    get-property "getChildren().Control[1].getChildren().Control[0].getText()" 
	        | equals "Insert single proposals automatically" | verify-true

        
         //auto activation
        get-property "getChildren().Control[2].getText()" | equals "Auto activation" | verify-true
        get-property "getChildren().Control[2].getChildren().length" | equals 6 | verify-true
        get-property "getChildren().Control[2].getChildren().Control[0].getSelection()" | equals true | verify-true
        get-property "getChildren().Control[2].getChildren().Control[0].getText()" | equals "Auto activation enabled" 
            | verify-true
        get-property "getChildren().Control[2].getChildren().Control[1].getText()" 
            | equals "Auto activation delay (ms)" | verify-true
        get-property "getChildren().Control[2].getChildren().Control[2].getText()" | equals 100 | verify-true
        get-property "getChildren().Control[2].getChildren().Control[2].getEditable()" | equals true | verify-true
        get-property "getChildren().Control[2].getChildren().Control[3].getText()" | equals "Auto activation triggers" 
            | verify-true
        get-property "getChildren().Control[2].getChildren().Control[4].getText()" | equals "" | verify-true
        get-property "getChildren().Control[2].getChildren().Control[4].getEditable()" | equals true | verify-true
        get-property "getChildren().Control[2].getChildren().Control[5].getText()" 
            | equals "Completion can be triggered by user request or can be automatically triggered when one of specified characters is typed." 
            | verify-true
            
        // kw    
         get-property "getChildren().Control[3].getText()" | equals Keywords | verify-true
        get-property "getChildren().Control[3].getChildren().length" | equals 7 | verify-true
        get-property "getChildren().Control[3].getChildren().Control[0].getSelection()" | equals false | verify-true
        get-property "getChildren().Control[3].getChildren().Control[0].getText()" 
            | equals "Include keywords from red.xml libraries not imported in robot file" | verify-true
            
        get-property "getChildren().Control[3].getChildren().Control[1].getText()" 
            | equals "Add library or resource name to keyword proposal insertion" | verify-true
        get-property "getChildren().Control[3].getChildren().Control[2].getText()" | equals "only when conflict exists" 
            | verify-true
        get-property "getChildren().Control[3].getChildren().Control[3].getText()" 
            | equals "After pressing Tab in arguments edition mode" | verify-true
        get-property "getChildren().Control[3].getChildren().Control[4].getText()" | equals "exit on last argument" 
            | verify-true
        get-property "getChildren().Control[3].getChildren().Control[5].getText()" 
            | equals "Ambiguous keyword finding strategy" | verify-true
        get-property "getChildren().Control[3].getChildren().Control[6].getText()" | equals "first found" | verify-true
        get-property "getChildren().Control[3].getBackgroundMode()" | equals 0 | verify-true
    }
    with [get-group Keywords | get-combo -after [get-label "Add library or resource name to keyword proposal insertion"]] {
        get-property "values[0]" | equals "always" | verify-true
        get-property "values[1]" | equals "only when conflict exists" | verify-true
        get-property "values[2]" | equals "never" | verify-true
    }
    with [get-group Keywords | get-combo -after [get-label "After pressing Tab in arguments edition mode"]] {
        get-property "values[0]" | equals "cycle between arguments" | verify-true
        get-property "values[1]" | equals "exit on last argument" | verify-true
    }
    with [get-combo -after [get-label "Ambiguous keyword finding strategy"]] {
        get-property "values[0]" | equals "first found" | verify-true
        get-property "values[1]" | equals "minimum required arguments" | verify-true
        get-property "values[2]" | equals "maximum required arguments" | verify-true
    }
}
get-window Preferences | get-button Cancel | click

get-view "Project Explorer" | get-tree | select "RobotProject/TestFile.robot" | double-click

// write keyword with content assist
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 1 19
    key-type Enter
    type-text Test
    key-type Enter
    type-text Call
    key-type "M1+SPACE"
    key-type Enter
}
// kayword name is plain, no lib attached
get-editor "TestFile.robot" | get-text-viewer | get-property text | equals "*** Test Cases ***\n"
    + "Test\n"
    + "    Call Method    object    method_name" | verify-true
    
// write resources files imports and create them using quick fix
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 0 0
    type-text "*** Settings ***"
    key-type Enter
    type-text "Resource    res1.robot"
    key-type Enter
    type-text "Resource    res2.robot"
    key-type Enter
}

wait-for-problems -count 2

// create res1
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 2 20
    key-type "M1+1"
}
with [get-window -from "CompletionProposalPopup.createProposalSelector()" | get-table] {
    get-property itemCount | equals 1 | verify-true
    get-property "getItems().TableItem[0].getText()" | equals "Create missing 'res1.robot' file" | verify-true
    select "Create missing 'res1.robot' file" | click -default
}
with [get-editor "res1.robot" | get-text-viewer] {
    set-text "*** Keywords ***\nkeyword\n    Log    1"
    key-type "M1+S"
}

// create res2
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 3 20
    key-type "M1+1"
}
with [get-window -from "CompletionProposalPopup.createProposalSelector()" | get-table] {
    get-property itemCount | equals 1 | verify-true
    get-property "getItems().TableItem[0].getText()" | equals "Create missing 'res2.robot' file" | verify-true
    select "Create missing 'res2.robot' file" | click -default
}
with [get-editor "res2.robot" | get-text-viewer] {
    set-text "*** Keywords ***\nkeyword\n    Log    2"
    key-type "M1+S"
}

// write new call to ambigous keyword 
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 6 45
    key-type Enter
    type-text key
    key-type "M1+SPACE"
    key-type Enter
}
// conflicting keyword should have resource name
get-editor "TestFile.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Resource    res1.robot\n"
    + "Resource    res2.robot\n"
    + "*** Test Cases ***\n"
    + "Test\n"
    + "    Call Method    object    method_name    \n"
    + "    res1.keyword" | verify-true

// change Assist option to add lib never
get-preferences-menu | click
with [get-window Preferences] {
    get-group Keywords | get-combo -after [get-label "Add library or resource name to keyword proposal insertion"] 
        | select "never"
    get-button Apply | click
    get-button $Apply_and_OK_in_preference | click
}

// write new call to ambigous keyword
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 7 17
    key-type Enter
    type-text key
    key-type "M1+SPACE"
    key-type Enter
}
// conflicting keyword should have no resource name
get-editor "TestFile.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Resource    res1.robot\n"
    + "Resource    res2.robot\n"
    + "*** Test Cases ***\n"
    + "Test\n"
    + "    Call Method    object    method_name    \n"
    + "    res1.keyword\n"
    + "    keyword" | verify-true

// change Assist option to add lib always
get-preferences-menu | click
with [get-window Preferences] {
    get-group Keywords | get-combo -after [get-label "Add library or resource name to keyword proposal insertion"] 
        | select "always"
    get-button Apply | click
    get-button $Apply_and_OK_in_preference | click
}

// write new keyword with content assist
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 6 45
    key-type Enter
    type-text Cal
    key-type "M1+SPACE"
    key-type Enter
}
// new keyword should have lib name 
get-editor "TestFile.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Resource    res1.robot\n"
    + "Resource    res2.robot\n"
    + "*** Test Cases ***\n"
    + "Test\n"
    + "    Call Method    object    method_name    \n"
    + "    BuiltIn.Call Method    object    method_name    \n"
    + "    res1.keyword\n"
    + "    keyword" | verify-true


//add Should Be Equal As Integers (it has 2 args)
with [get-editor "TestFile.robot"] {
    with [get-text-viewer] {
        hover-text 6 10
        set-caret-pos 7 53
        key-type "NUMPAD_ENTER" "\\u000D"
        type-text shou
        key-type "M1+SPACE"
        wait 300
        key-type Down -times 2
        key-type Enter
    }
    
    //set carte afer BuiltIn.Should
    get-canvas | key-type "TRAVERSE_ESCAPE"
    with [get-text-viewer] {
        key-type ESC
        hover-text 8 22
        set-caret-pos 8 19
        key-type "M1+SPACE"
    }
}

//select KW that has only one arg
get-window -from "CompletionProposalPopup.createProposalSelector()" | get-table | select "Should Be True - BuiltIn" 
    | click -default
    
//remove adding prefix    
get-preferences-menu | click
with [get-window Preferences] {
    get-group Keywords | get-combo -after [get-label "Add library or resource name to keyword proposal insertion"] 
        | select "only when conflict exists"
    get-button Apply | click
    get-button $Apply_and_OK_in_preference | click
}

//set caret after "Ca" - Catenate will fit too
with [get-editor "TestFile.robot" | get-text-viewer] {
   set-caret-pos 6 7
    key-type "M1+SPACE"
}

//select Catenate
get-window -from "CompletionProposalPopup.createProposalSelector()" | get-table | select "Catenate - BuiltIn" | click 
    -default
    
//check that args were not removed nor new added    
get-editor "TestFile.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Resource    res1.robot\n"
    + "Resource    res2.robot\n"
    + "*** Test Cases ***\n"
    + "Test\n"
    + "    Catenate    object    method_name    \n"
    + "    BuiltIn.Call Method    object    method_name    \n"
    + "    BuiltIn.Should Be True    first    second    \n"
    + "    res1.keyword\n"
    + "    keyword" | verify-true
    
// cycling
with [get-editor "TestFile.robot" | get-text-viewer] {
    set-caret-pos 8 50
    key-type "NUMPAD_ENTER" "\\u000D"
    
    //add Sh be equal
    type-text Sh
    key-type "M1+SPACE"
    wait 200
    key-type Down
    key-type Enter
    //press tab 3 times to go to 3 frame
    key-type Tab -times 3
    key-type ESC
}
with [get-editor "TestFile.robot" | get-text-viewer] {
    get-property "caretPosition.line" | equals 9 | verify-true
    get-property "caretPosition.column" | equals 48 | verify-true
}

//change to cycle
get-preferences-menu | click
with [get-window Preferences] {
    get-group Keywords | get-combo -after [get-label "After pressing Tab in arguments edition mode"] 
        | select "cycle between arguments"
    get-button "Apply and Close" | click
}
with [get-editor "TestFile.robot" | get-text-viewer] {
    // select Shoule be empty
    set-caret-pos 9 48
    key-type "NUMPAD_ENTER" "\\u000D"
    type-text Sh
    key-type "M1+SPACE"
    wait 200
    key-type Enter
    //press 3 times to go to first arg
    key-type Tab
    wait 300
    key-type Tab
}

with [get-editor "TestFile.robot" | get-text-viewer] {
    get-property "caretPosition.line" | equals 10 | verify-true
    get-property "caretPosition.column" | equals 28 | verify-true
    get-property "getSelectionText()" | equals item | verify-true
}   

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
